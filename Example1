

import java.io.File;
import java.util.Random;
import java.util.Scanner;

/**
 * This class represents a Minesweeper game.
 *
 * @Garav Soni YOUR NAME <gs93569@uga.edu>
 */
public class Minesweeper {
	private static int rows;
	private static int x;
	private static int y;
	private static int cols;
	private static int i;
	private static int j;
	private static int d;
	int rw =0;
	int GenerateMine =0;
	String Finalversion = " ";
	private static int f;
	private static int value1;
	private static int value2;
	static Random r = new Random();
	private static char a;
	private static String [][] Store;
	private static String [][] grid;
	private static boolean [][] Last;
	static Scanner scan = new Scanner(System.in);

    /**
     * Constructs an object instance of the {@link Minesweeper} class using the
     * information provided in <code>seedFile</code>. Documentation about the 
     * format of seed files can be found in the project's <code>README.md</code>
     * file.
     *
     * @param seedFile the seed file used to construct the game
     * @see            <a href="https://github.com/mepcotterell-cs1302/cs1302-minesweeper-alpha/blob/master/README.md#seed-files">README.md#seed-files</a>
     */
    public Minesweeper(File seedFile) {

       try {
    	   File df = new File("seed1.txt");
			  Scanner s = new Scanner(df);
			  	rows = s.nextInt();
			  	System.out.println(rows);
				cols = s.nextInt();
				System.out.println(cols);
				int ch = s.nextInt();
    	   for( int i = 0; i< ch; i++){
				Last[s.nextInt()][s.nextInt()] = true;
				System.out.println(Last[s.nextInt()]);
    	   }
    
			}
			catch (Exception e) {
			   e.getMessage();
			   System.out.println("Cannot create game with FILENAME, because it is not formatted correctly.");
			   System.out.println("                                                                        ");
			}

    }

    /**
     * Constructs an object instance of the {@link Minesweeper} class using the
     * <code>rows</code> and <code>cols</code> values as the game grid's number
     * of rows and columns respectively. Additionally, One quarter (rounded up) 
     * of the squares in the grid will will be assigned mines, randomly.
     *
     * @param rows the number of rows in the game grid
     * @param cols the number of cols in the game grid
     */
    public Minesweeper(int rows, int cols) {

    	 if((rows>0 && cols >0)&&(rows<=10&&cols<=10)){
			   this.rows=rows;
			   this.cols=cols;
			   GenerateMine = (int) Math.ceil(rows * cols * 0.25);
			   Random12(GenerateMine);
		 }else if((rows==0 && cols==0)&& (rows>10&&cols>10)){
			 System.out.println("Cannot create a mine field with that many rows and/or columns!");
			 
		 }
	}
	

     // Minesweeper
   

	
	public static void Introduction() {
		System.out.println("        _      ");
		System.out.println("  /\\/\\ (_)_ __   ___  _____      _____  ___ _ __   ___ _ __");
		System.out.println(" /    \\| | '_ \\ / _ \\/ __\\ \\ /\\ / / _ \\/ _ \\ '_ \\ / _ \\ '__|");
		System.out.println("/ /\\/\\ \\ | | | |  __/\\__ \\ V  V /  __/  __/ |_) |  __/ |");
		System.out.println("\\/    \\/_|_| |_|\\___||___/ \\_/\\_/ \\___|\\___| .__/ \\___|_|         ");
		System.out.println("                              ALPHA EDITION |_| v2017.f       ");
		System.out.println(" ");
	}
	//Introduction to the game
	public static void Help(){
		System.out.println("Commands Available...");
		System.out.println(" - Reveal: r/reveal row col");
		System.out.println(" -   Mark: m/mark   row col");
		System.out.println(" -  Guess: g/guess  row col");
		System.out.println(" -   Help: h/help");
		System.out.println(" -   Quit: q/quit");
	}
	//Help menu Method
	public static void PlayerLoses(){
		System.out.println("                                     ");
		System.out.println(" Oh no... You revealed a mine!");
		System.out.println("  __ _  __ _ _ __ ___   ___    _____   _____ _ __ ");
		System.out.println(" / _` |/ _` | '_ ` _ \\ / _ \\  / _ \\ \\ / / _ \\ '__|");
		System.out.println("| (_| | (_| | | | | | |  __/ | (_) \\ V /  __/ |  ");
		System.out.println("\\__, |\\__,_|_| |_| |_|\\___|  \\___/ \\_/ \\___|_|");
		System.out.println(" |___/                                           ");
		System.out.println("                                            ");
		
		
	}
		//Player loses Method when he or she reveals a mine 

	private boolean isInBounds(int row, int col) {
		return false; 
		
	
	
		
		}
	// returns true if the seed file is in bounds,returns false otherwise
	public void Wordloop(String RowsAndCols){
		int GenerateMine = (int) Math.ceil(rows * cols * 0.25);
		Random12(GenerateMine);
		int q =0;
		
		
		
		Store = new String[rows][cols+1];
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				Store[i][j] = " ";
			}
		}
		
		grid=new String[rows][cols];

		i =0;
		j =0;
		grid();
				
				boolean game = false;
				while( game == false){
			
			RowsAndCols = scan.nextLine().trim();
			
			
			Finalversion = RowsAndCols.replaceAll("\\s{2,}"," ");
			
			String string1 = RowsAndCols;
			if(((Finalversion.charAt(0)=='q'&& Finalversion.length()==1)))
			    {
				quit();
				System.exit(0);
			}
			else if(Finalversion.charAt(0)=='h'&& Finalversion.length()==1){
				Help();
				
			}
			else if((Finalversion.charAt(0)!='h'&& Finalversion.charAt(0)!='q') && (Finalversion.length()==1)){
			
			System.out.println("Command not recognized!");
			System.out.println("                     ");
			System.out.println("Rounds Completed: " + ++q);
			System.out.println("                        ");
	
			
			
			}else if((Finalversion.charAt(0) != 'q' && Finalversion.charAt(1) != 'u') && (Finalversion.length()==2)){
				System.out.println("Command not recognized!");
				System.out.println("                     ");
				System.out.println("Rounds Completed: " + ++q);
				System.out.println("                        ");
				System.out.println("here");
			}else if(((Finalversion.charAt(0) != 'q' && Finalversion.charAt(0) != 'r' && Finalversion.charAt(0) != 'm'&& Finalversion.charAt(0) != 'g') && Finalversion.charAt(1) != 'u'  && Finalversion.charAt(2) != 'i') && (Finalversion.length()==3)){
				System.out.println("Command not recognized!");
				System.out.println("                     ");
				System.out.println("Rounds Completed: " + ++q);
			}else if((Finalversion.charAt(0) != 'h' && Finalversion.charAt(1) != 'e') && (Finalversion.length()==2)){
				System.out.println("Command not recognized!");
				System.out.println("                     ");
				System.out.println("Rounds Completed: " + ++q);
			}else if(((Finalversion.charAt(0) != 'h' && Finalversion.charAt(0) != 'r'&& Finalversion.charAt(0) != 'm'&& Finalversion.charAt(0) != 'g') && Finalversion.charAt(1) != 'e' && Finalversion.charAt(2) != 'l') && (Finalversion.length()==3)){
				System.out.println("Command not recognized!");
				System.out.println("                     ");
				System.out.println("Rounds Completed: " + ++q);
			}
			else if((Finalversion.charAt(0)=='h'  && Finalversion.length()==1)|| (Finalversion.charAt(0)=='h'&& Finalversion.charAt(1)=='e'&& Finalversion.charAt(2)=='l'&& Finalversion.charAt(3)=='p' &&  Finalversion.length()<=4)){
				Help();
				System.out.println("                     ");
				System.out.println("Rounds Completed: " + ++q);
				System.out.println("                        ");
			
				
			}else if ((Finalversion.charAt(0)=='q'&& Finalversion.length()==1) ||(Finalversion.charAt(0)=='q'&& Finalversion.charAt(1)=='u'&& Finalversion.charAt(2)=='i'&& Finalversion.charAt(3)=='t'&& Finalversion.length()==4) ){
			        quit();
				System.exit(0);
				}
			else if((Finalversion.charAt(0)=='m' && Finalversion.length()>=5) || (Finalversion.charAt(1)=='a' && Finalversion.charAt(2)=='r' && Finalversion.charAt(3)=='k')){
		
					if(Finalversion.charAt(0) == 'm' && Finalversion.charAt(1) != 'a'){
								System.out.println("                       ");
						       System.out.println("Rounds Completed: " + ++q);
						       System.out.println("                         ");
								x=Character.getNumericValue(Finalversion.charAt(2));
								y=Character.getNumericValue(Finalversion.charAt(4));
								if(x>=rows){
									System.out.println("Cannot create a mine field with that many rows and/or columns!");
									System.exit(0);
								}else if (y>=cols){
									System.out.println("Cannot create a mine field with that many rows and/or columns!");
									System.exit(0);
								}
								a = Finalversion.charAt(0);
								Store[x][y] = "m";
								
					
								
					}else if(Finalversion.charAt(0) == 'm' && Finalversion.charAt(1) == 'a' && Finalversion.charAt(2) == 'r' && Finalversion.charAt(3) == 'k' && Finalversion.length()==7){
						System.out.println("                     ");
						System.out.println("Rounds Completed: " + ++q);
						System.out.println("                       ");
						x=Character.getNumericValue(Finalversion.charAt(5));
						y=Character.getNumericValue(Finalversion.charAt(7));
						if(x>=rows){
							System.out.println("Cannot create a mine field with that many rows and/or columns!");
							System.exit(0);
						}else if (y>=cols){
							System.out.println("Cannot create a mine field with that many rows and/or columns!");
							System.exit(0);
						}
						 a = Finalversion.charAt(0);
							Store[x][y] = "m";
						
					}
			
			}else if((Finalversion.charAt(0) == 'g' && Finalversion.length()>=5) || (Finalversion.charAt(1) =='u' && Finalversion.charAt(2)=='e' && Finalversion.charAt(3)=='s' && Finalversion.charAt(4)=='s')){
				if(Finalversion.charAt(0) == 'g' && Finalversion.charAt(1) != 'u'){
					System.out.println("                         ");
					System.out.println("Rounds Completed: " + ++q);
					System.out.println("                           ");
					x=Character.getNumericValue(Finalversion.charAt(2));
					y=Character.getNumericValue(Finalversion.charAt(4));
					if(x>=rows){
						System.out.println("Cannot create a mine field with that many rows and/or columns!");
						System.exit(0);
					}else if (y>=cols){
						System.out.println("Cannot create a mine field with that many rows and/or columns!");
						System.exit(0);
					}
					a = Finalversion.charAt(0);
					
					Store[x][y] = "g";
				}else if(Finalversion.charAt(0) == 'g' && Finalversion.charAt(1) == 'u' && Finalversion.charAt(2) == 'e' && Finalversion.charAt(3) == 's' && Finalversion.charAt(4)=='s' &&  Finalversion.length()==8){
					System.out.println("                           ");
					System.out.println("Rounds Completed: " + ++q);
					System.out.println("                           ");
					x=Character.getNumericValue(Finalversion.charAt(6));
					y=Character.getNumericValue(Finalversion.charAt(8));
					if(x>=rows){
						System.out.println("Cannot create a mine field with that many rows and/or columns!");
						System.exit(0);
					}else if (y>=cols){
						System.out.println("Cannot create a mine field with that many rows and/or columns!");
						System.exit(0);
					}
					a = Finalversion.charAt(0);
					
					Store[x][y] = "g";
				}
			}else if((Finalversion.charAt(0) == 'r'&& Finalversion.length()>=5 || (Finalversion.charAt(1) == 'e') && Finalversion.charAt(2) == 'v' && Finalversion.charAt(3) == 'e' && Finalversion.charAt(4)=='a' && Finalversion.charAt(5)=='l')){
					if(Finalversion.charAt(0) == 'r' && Finalversion.charAt(1) != 'e'){
						System.out.println("                           ");
						System.out.println("Rounds Completed: " + ++q);
						System.out.println("                           ");
						x=Character.getNumericValue(Finalversion.charAt(2));
						y=Character.getNumericValue(Finalversion.charAt(4));
						if(x>=rows){
							System.out.println("Cannot create a mine field with that many rows and/or columns!");
							System.exit(0);
						}else if (y>=cols){
							System.out.println("Cannot create a mine field with that many rows and/or columns!");
							System.exit(0);
						}
						a = Finalversion.charAt(0);
						Store[x][y] = "r";
						
					}else if(Finalversion.charAt(0) == 'r' && Finalversion.charAt(1) == 'e' && Finalversion.charAt(2) == 'v' && Finalversion.charAt(3) == 'e' && Finalversion.charAt(4) == 'a' && Finalversion.charAt(5) == 'l' && Finalversion.length()==9){
						System.out.println("                           ");
						System.out.println("Rounds Completed: " + ++q);
						System.out.println("                           ");
						x=Character.getNumericValue(Finalversion.charAt(7));
						y=Character.getNumericValue(Finalversion.charAt(9));
						if(x>=rows){
							System.out.println("Cannot create a mine field with that many rows and/or columns!");
							System.exit(0);
						}else if (y>=cols){
							System.out.println("Cannot create a mine field with that many rows and/or columns!");
							System.exit(0);
						}
						a = Finalversion.charAt(0);

						Store[x][y] = "r";
				}else if(Finalversion.charAt(1)!=' '){
					System.out.println("Command not recognized!");
					System.out.println("                     ");
					System.out.println("Rounds Completed: " + ++q);
					System.out.println("                        ");
				}else if(Finalversion.charAt(3)!=' '){
					System.out.println("Command not recognized!");
					System.out.println("                     ");
					System.out.println("Rounds Completed: " + ++q);
					System.out.println("                        ");
					
			
				}else if((Finalversion.charAt(0)=='r')){
					System.out.println("Command not recognized!");
					System.out.println("                     ");
					System.out.println("Rounds Completed: " + ++q);
					System.out.println("                        ");
					
				}
					else{
					
				
			}
					
			
			
			}
			
			
			

			for(i=0;i<grid.length;i++)
			{
					
					
					System.out.print(" "+i);
				for(j=0;j<grid[0].length+1;j++)
				{
						
					if ((Store[i][j] != null) && (Store[i][j].equals("r") || Store[i][j].equals("m") || (Store[i][j].equals("g")))) {
						if(Store[i][j] == "r"){
							
								
							
								
					
								if(Last[i][j] != true){
									System.out.print(" | "+getNumAdjMines(rows,cols)+" " );
								}
								
								
								
								else if (Last[i][j] == true){
									System.out.print(" |   ");
									game = true;
									
								}
								
							
						}else if(Store[i][j] == "m"){
							if(rw != GenerateMine){
							System.out.print(" | F ");
							}
							int h=0;
							if(Last[i][j]==true) {
								grid[i][j]="f";
								rw++;
								if(grid[i][j]=="f" && rw ==GenerateMine){
									WinAndScore(GenerateMine,rows,cols,q);
									System.exit(0);
								}
									
								
							}
							
							
							
							
							
							
								
								
						}else if(Store[i][j] == "g"){
							
							System.out.print(" | ? ");
							
							
						}	
					
					}else{
						System.out.print(" |   ");
					}	
				}
				System.out.println();
				} 
			System.out.print("   ");
				for(int k=0;k<grid[0].length;k++)
				{
					System.out.print("  " +k+ "  ");
					
					
				}
				
				System.out.println("   ");
	
		}		
				
				PlayerLoses();
				System.exit(0);
	}
//Main loop for the game, gives scanner input to the user, reads the user input, and creates a grid and stores information
    public static void quit(){
	System.out.println("(ಠ_ಠ)");
	System.out.println("Y U NO PLAY MORE?");
	System.out.println("Bye!");


    }	
public static void WinAndScore(int generateMine, int rows, int cols, int q){
	int score = (rows*cols)-generateMine-q;
		System.out.println(" \"So Doge\"");
		System.out.println("▒▒▒");
		System.out.println("▒▒▒▒▒ \"Such Score\"");
		System.out.println("▒▒▒▒▒ ");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒ \"Much Minesweeping\"");                                   
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ \"Wow\");                                     ");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
		System.out.println("▒▒▒▒▒▒▒▒▒▒▒▒▒▒ CONGRATULATIONS!");
		System.out.println("▒▒▒▒▒ YOU HAVE WON!");
		System.out.println("▒▒▒▒▒▒▒▒▒▒" +"Score: " + score);
	
		
		
	}
		
		// Win score method, for when user wins the game
	
	
	
	 public static void Random12(int GenerateMine){
		 Last= new boolean[rows][cols];
			for(int g=0;g<GenerateMine;g++){
				d = r.nextInt(rows);
				f = r.nextInt(cols);
				if(Last[d][f] == false){
					Last[d][f] = true;
				}
			}
	 }
	
	//Generates Ramdon of mines based on the rows and cols
	
	
	
	public void grid()
	{
		System.out.println("                        ");
		System.out.println("Rounds Completed: " + "0");
		System.out.println("                        ");
		grid=new String [rows][cols];
		int value1=x;
		int value2=y;
		
	
		
		for(int i=0;i<grid.length;i++)
		{
			
				System.out.print(" "+i);
			for(int j=0;j<grid[0].length+1;j++)
			{
						System.out.print(" |   ");	
						
			}
			System.out.println();
			
			} 
			System.out.print("   ");
			for(int k=0;k<grid[0].length;k++)
			{
				System.out.print("  " +k+ "  ");
				
			}
			
			System.out.println("   ");
			 
			
			}
	
	//Makes the first intial grid
	


	public int getNumAdjMines(int rows, int cols) {
		int l=0;
		
		if(i==0 && j ==0){
		 if(Last[i+1][j]==true){
			 l++;
		 }
		 if(Last[i+1][j+1]==true){
			 l++; 
		 }
		 if((Last[i][j+1]==true)){
			 l++;
		 
			}
			}
		else if(i == rows-1 && j==0){
	
			 if(Last[i][j+1]==true){
				 l++;
			 }
			 if(Last[i-1][j+1]==true){
				 l++; 
			 }
			 if((Last[i-1][j]==true)){
				 l++;
			 }
		}else if(i==0 && j ==cols-1){
			if(Last[i+1][j-1]==true){
				 l++;
			 }
			 if(Last[i+1][j]==true){
				 l++; 
			 }
			 if((Last[i][j-1]==true)){
				 l++;
			 }
		}else if(i==rows-1 && j ==cols-1){
				if(Last[i-1][j]==true){
					 l++;
					}
				if(Last[i-1][j-1]==true){
						 l++; 
					 }
				 if((Last[i][j-1]==true)){
						 l++;
		}
		}
		else if(i==0){
			if(Last[i][j-1]==true){
				 l++;
				}
			if(Last[i+1][j]==true){
				 l++;
				}
			if(Last[i+1][j-1]==true){
				 l++;
				}
			if(Last[i+1][j+1]==true){
				 l++;
				}
			if(Last[i][j+1]==true){
				 l++;
				}
			
		}else if (j==0){
			if(Last[i-1][j]==true){
				 l++;
				}
			if(Last[i-1][j+1]==true){
				 l++;
				}
			if(Last[i][j+l]==true){
				 l++;
				}
			if(Last[i+1][j+1]==true){
				 l++;
				}
			if(Last[i+1][j]==true){
				 l++;
			}
		}else if (i==rows-1){
			if(Last[i][j-1]==true){
				 l++;
				}
			if(Last[i-1][j+1]==true){
				 l++;
				}
			if(Last[i-1][j]==true){
				 l++;
				}
			if(Last[i-1][j+1]==true){
				 l++;
				}
			if(Last[i][j+1]==true){
				 l++;
				}
		}else if (j==cols-1){
			if(Last[i-1][j]==true){
				 l++;
				}
			if(Last[i-1][j-1]==true){
				 l++;
				}
			if(Last[i][j-1]==true){
				 l++;
				}
			if(Last[i+1][j-1]==true){
				 l++;
				}
			if(Last[i+1][j]==true){
				 l++;
				}
		}else if (j!=0 && i!=0 & j !=cols-1 & i !=rows-1){
			if(Last[i-1][j-1]==true){
				 l++;
				}
			if(Last[i-1][j]==true){
				 l++;
				}
			if(Last[i-1][j+1]==true){
				 l++;
				}
			if(Last[i][j+1]==true){
				 l++;
				}
			if(Last[i+1][j+1]==true){
				 l++;
				}
			if(Last[i+1][j]==true){
				 l++;
				}
			if(Last[i+1][j-1]==true){
				 l++;
				}
			if(Last[i][j-1]==true){
				 l++;
				}
		}
		return l;
		}
		
	//Gives the number of mines Adj to the row and column
	public void run(String rowsAndCols,String[][] Store123)
	{ 
		
		Introduction();
		Wordloop(rowsAndCols);

		
		
			try {
			  File f = new File("seed1.txt");
			  Scanner s = new Scanner(f);
			  if(s.hasNextInt()){
				  if(rows==0 & cols==0){
					  System.out.println("here");
				  }else if(rows==1 & cols==1){
					  
				  }else if(rows==2 & cols==2){
			  }else if(rows == 3 & cols ==3){
				  
			  }
			  
			  }
			}
			catch (Exception e) {
			   e.getMessage();
			   System.out.println("Cannot create game with FILENAME, because it is not formatted correctly.");
			   System.out.println("                                                                        ");
			}
		
		
		
	
		
		
	
		
		
		
			
		
	}


	
	
	
		
	
    
    
    
    
    public void run() {
	Introduction();
    	Wordloop(Finalversion);
	// TODO implement

    } // run


    /**
     * The entry point into the program. This main method does implement some
     * logic for handling command line arguments. If two integers are provided
     * as arguments, then a Minesweeper game is created and started with a 
     * grid size corresponding to the integers provided and with 10% (rounded
     * up) of the squares containing mines, placed randomly. If a single word 
     * string is provided as an argument then it is treated as a seed file and 
     * a Minesweeper game is created and started using the information contained
     * in the seed file. If none of the above applies, then a usage statement
     * is displayed and the program exits gracefully. 
     *
     * @param args the shell arguments provided to the program
     */
    public static void main(String[] args) {

	/*
	  The following switch statement has been designed in such a way that if
	  errors occur within the first two cases, the default case still gets
	  executed. This was accomplished by special placement of the break
	  statements.
	*/

	Minesweeper game = new Minesweeper(10,5);

	switch (args.length) {

        // random game
	case 2: 

	    int rows, cols;

	    // try to parse the arguments and create a game
	    try {
		rows = Integer.parseInt(args[0]);
		cols = Integer.parseInt(args[1]);
		game = new Minesweeper(rows, cols);
		break;
	    } catch (NumberFormatException nfe) { 
		// line intentionally left blank
	    } // try

	// seed file game
	case 1: 

	    String filename = args[0];
	    File file = new File(filename);

	    if (file.isFile()) {
		game = new Minesweeper(file);
		break;
	    } // if
    
        // display usage statement
	default:

	    System.out.println("Usage: java Minesweeper [FILE]");
	    System.out.println("Usage: java Minesweeper [ROWS] [COLS]");
	    System.exit(0);

	} // switch

	// if all is good, then run the game
	game.run();

    } // main


